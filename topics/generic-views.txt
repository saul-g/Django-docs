================
Vistas genéricas
================


.. versionchanged:: 1.3

.. note::

    A partir de Django 1.3, las vistas genéricas basadas en funciones han quedado en
    desuso en favor de un enfoque basado en clases, que se describe en el documento
    clases basadas en vistas :doc:`topic guide </topics/class-based-views>` y en
    :doc:`detailed reference </ref/class-based-views>`.

Escribir aplicaciones web pueden ser monótono, ya que repetimos ciertos patrones
una y otra vez. Django intenta quitar algo de esa monotonía en el modelo
y en la capa de plantilla, pero los desarrolladores web también experimentan ese
aburrimiento a nivel de vistas.

Las Visitas genéricas en  *Django* fueron desarrolladas  para aliviar ese dolor. Toman ciertas
expresiones y patrones comunes encontrados en el desarrollo de vista y lo abstraen de modo que
podamos  escribir vistas comunes de datos  sin tener que escribir demasiado código.

Podemos reconocer ciertas tareas comunes, como mostrar una lista de objetos, y
escribir el código que muestra una lista de objetos *cualquiera*. El modelo en
cuestion puede ser pasado como un argumento adicional  a traves de la URLconf.

Django viene con vistas genéricas que pueden hacer lo siguiente:

* Realizar tareas "simples" y comunes: redirigir a una página diferente y renderizar una plantilla dada.

* Mostrar paginas de listado y  detalles para un único objeto. Si estuviéramos
  creando un  aplicación para gestionar conferencias tendriamos una vista ``talk_list``
  y tambien una ``registered_user_list`` estas vista serían ejemplos de vistas de lista.
  Una simple página de discusión es un ejemplo de lo que llamamos una vista de "detalle".

* Presentar objetos basados en paginas de archivos de acuerdo a una fecha ​​en el año/mes/día y
  su detalle asociado, y las paginas "nuevos". El blog web  de Django (https://www.djangoproject.com/weblog/)
  los archivos son construidos con estos año, mes y día se construyen con
  las mismas, como sería un típicorchivo de un periodico
  
* Permitir a los usuarios crear, actualizar y borrar objetos -con o sin autorización-.

Tomados en conjunto, estas vistas proporcionan interfaces fáciles para realizar los
trabajos más comunes que puedan encontrar los desarrolladores.

Usando vistas genéricas
=======================

Todas estas vistas son usadas  creando diccionarios de configuración en
el archivo URLconf y pasando esos diccionarios como el tercer miembro de la
Tupla URLconf para un patrón dado.

Por ejemplo, he aquí una simple  URLconf  que se puede utilizar para presentar
una pagina  estática "about" Página de inicio ::

    from django.conf.urls import patterns, url, include
    from django.views.generic.simple import direct_to_template

    urlpatterns = patterns('',
        ('^about/$', direct_to_template, {
            'template': 'about.html'
        })
    )

Aunque esto puede parecer un poco "mágico" a primera vista - mira, una vista sin
código! - En realidad, ``direct_to_template`` la vista simplemente toma información de
el diccionario de parámetros extra y utiliza esa información al representar la
vista.

Por que estas vistas genericas - y todas los demás - es una función de vista normal
como cualquier otra, podemos reutilizarlas dentro de nuestros propias vistas. Como ejemplo, vamos a
extender nuestro ejemplo  "about" para mapear la URLs de la forma ``/about/<whatever>/`` para
renderizar estáticamente ``about/<whatever>.html`` . Vamos a hacer esto primero modificando
la URLconf para que apunte a una función de vista:


.. parsed-literal::

    from django.conf.urls import patterns, url, include
    from django.views.generic.simple import direct_to_template
    **from books.views import about_pages**

    urlpatterns = patterns('',
        ('^about/$', direct_to_template, {
            'template': 'about.html'
        }),
        **('^about/(\\w+)/$', about_pages),**
    )

A continuación, escribimos la vista ``about_pages``::

    from django.http import Http404
    from django.template import TemplateDoesNotExist
    from django.views.generic.simple import direct_to_template

    def about_pages(request, page):
        try:
            return direct_to_template(request, template="about/%s.html" % page)
        except TemplateDoesNotExist:
            raise Http404()


Aquí estamos tratando con ``direct_to_template`` como cualquier otra función. Puesto que
devuelve una respuesta ``HttpResponse``, podemos simplemente retornarla asi como está.
La unica ligera dificultad  aqui es ocuparse de  las plantillas que faltan.
No queremos que una plantilla inexistente pueda provocar un error de el servidor,
por lo que atrapamos la exepcion  ``TemplateDoesNotExist`` y retornamos un
un error 404 en su lugar.

.. admonition:: ¿Existe una vulnerabilidad de seguridad aqui?

    Los lectores atentos  habrán notado un posible agujero de seguridad:
    estamos  construillendo el nombre de la plantilla interpolando contenido
    desde el navegador(``template="about/%s.html" % page``). A primera vista, esto parece una
    clasica vulnerabilidad  de *recorrido de directorio* . ¿Pero es eso realmente?

    No exactamente. Sí, es un valor creado de manera malintencionada de ``page`` podría causar
    un recorrido de directorio, pero aunque ``page``  *es* tomado de la URL de la solicitud,
    no todos los valores serán aceptados. La clave está en la URLconf: que  estamos usando
    la expresión regular ``\ w +`` para que coincida con la parte ``page`` de la URL, y
    ``\``  sólo acepta letras y números. De este modo, los caracteres maliciosos
    (Puntos y barras, en este caso), serán rechazadas por la resolución de URL antes de que
    lleguen  a la vista en sí.

Vistas genéricas de objetos
========================

El ``direct_to_template`` es ciertamente útil, pero las vistas genéricas de Django
realmente brillan cuando se trata de presentar vistas sobre el contenido de tu base de datos. Porque
Es una tarea común, Django viene con un puñado de vistas genericas incorporadas
que hacen la generación de vistas de listado y detalle de objetos increíblemente fácil.

Echemos un vistazo a una de estas vistas genéricas: la vista "object list". Vamos a usar
estos modelos::

    # models.py
    from django.db import models

    class Publisher(models.Model):
        name = models.CharField(max_length=30)
        address = models.CharField(max_length=50)
        city = models.CharField(max_length=60)
        state_province = models.CharField(max_length=30)
        country = models.CharField(max_length=50)
        website = models.URLField()

        def __unicode__(self):
            return self.name

        class Meta:
            ordering = ["-name"]

    class Book(models.Model):
        title = models.CharField(max_length=100)
        authors = models.ManyToManyField('Author')
        publisher = models.ForeignKey(Publisher)
        publication_date = models.DateField()

Para crear una pagina de lista de todos los publishers, usaremos la URLconf bajo estas lineas::

    from django.conf.urls import patterns, url, include
    from django.views.generic import list_detail
    from books.models import Publisher

    publisher_info = {
        "queryset" : Publisher.objects.all(),
    }

    urlpatterns = patterns('',
        (r'^publishers/$', list_detail.object_list, publisher_info)
    )


Este es todo el código Python que necesitamos para escribir. Sin embargo, todavía
tenemos que escribir una plantilla. Podriamos decirle explicitamente ala vista
``object_list`` que plantilla deve  utilizar mediante la inclusión de una
clave en el diccionario de argumentos extra ``template_name``, pero en
la ausencia de una plantilla explícita Django inferirá una del nombre del objeto.
En este caso, la plantilla se inferida sera ``"books/publisher_list.html"``
- la parte "books" proviene del nombre de la aplicación que define el modelo,
mientras que el "publisher" es solo la version del nombre del modelo en  minúsculas.


.. highlightlang:: html+django

Esta plantilla será renderizada en un contexto que contiene una variable llamada
``object_list`` la cual contiene todos los objetos book. Una plantilla muy simple
podría verse como la siguiente::


    {% extends "base.html" %}

    {% block content %}
        <h2>Publishers</h2>
        <ul>
            {% for publisher in object_list %}
                <li>{{ publisher.name }}</li>
            {% endfor %}
        </ul>
    {% endblock %}


Eso es realmente todo en lo referente al tema. Todas las geniales características
de las vistas genéricas provienen de cambiar el diccionario “info” pasado a
la vista genérica. El  documento :doc:`generic views reference</ref/generic-views>`
describe  todas las vistas genéricas y todas  sus opciones en detalle;
el resto de este capítulo considerará algunas de las formas comunes en que tú
puedes personalizar y extender las vistas genéricas.

Extender las vistas genéricas
=============================

.. highlightlang:: python

No hay duda de que el uso de las vistas genéricas puede acelerar el desarrollo
sustancialmente. En la mayoría de los proyectos, sin embargo, llega un momento en
el que las vistas generica no son suficientes. De hecho, la pregunta más común que
se hacen los desarrolladores de Djando  es cómo hacer que las vistas genéricas
manejen un rango  más amplio de situaciones.

Afortunadamente, en casi cada uno de estos casos, hay maneras de extender simplemente
las vistas genéricas para manejar una mayor variedad de casos de uso. Estas situaciones generalmente
reacaen en un puñado de patrones que se tratan en las secciones siguientes.

Haciendo contextos de plantilla "amigables"
-------------------------------------------

Tal vez hayas notado que el ejemplo de la plantilla publisher list almacena
todos los books en una variable llamada ``object_list``. Aunque que esto funciona
bien, no es una forma “amistosa” para los autores de plantillas: ellos sólo
tienen que “saber” aquí que están trabajando con books. Un nombre mejor para
esa variable sería ``publisher_list``; el contenido de esa variable es bastante
obvio.

Podemos cambiar el nombre de esa variable fácilmente con el argumento ``template_object_name``:


.. parsed-literal::

    publisher_info = {
        "queryset" : Publisher.objects.all(),
        **"template_object_name" : "publisher",**
    }

    urlpatterns = patterns('',
        (r'^publishers/$', list_detail.object_list, publisher_info)
    )

Proveer un ``template_object_name`` útil es siempre una buena idea. Tus compañeros
de trabajo que diseñan las plantillas te lo agradecerán.

Agregar un contexto extra
-------------------------
A menudo simplemente necesitas presentar alguna información extra aparte de la
proporcionada por la vista genérica. Por ejemplo, piensa en mostrar una lista
de todos los otros publisher en cada página de detalle de un publisher. La vista
genérica ``object_detail`` provee el publisher al contexto, pero parece que no hay
forma de obtener una lista de todos los publishers en esa plantilla.

Pero sí la hay: todas las vistas genéricas toman un parámetro opcional extra,
``extra_context``. Este es un diccionario de objetos extra que serán agregados al
contexto de la plantilla. Por lo tanto, para proporcionar la lista de todos los
publishers en la vista de detalles, usamos un diccionario info como el que sigue:

.. parsed-literal::

    from books.models import Publisher, **Book**

    publisher_info = {
        "queryset" : Publisher.objects.all(),
        "template_object_name" : "publisher",
        **"extra_context" : {"book_list" : Book.objects.all()}**
    }

Esto llenaría una variable ``{{ book_list }}`` en el contexto de la plantilla.
Este patrón puede ser usado para pasar cualquier información hacia la
plantilla para la vista genérica. Es muy práctico.


Sin embargo, en realidad hay un error sutil aquí – ¿puedes detectarlo?

El problema aparece cuando son evaluadas las consultas en ``extra_context``.
Debido a que este ejemplo coloca ``Publisher.objects.all()`` en la URLconf, sólo
se evaluará una vez (cuando la URLconf se cargue por primera vez). Una vez que
agregues o elimines publishers, notarás que la vista genérica no refleja estos
cambios hasta que reinicias el servidor Web (mira “Almacenamiento en caché y
QuerySets” en el Apéndice C para mayor información sobre cuándo los QuerySets
son almacenados en la cache y evaluados).

.. note::

    Este problema no se aplica al argumento ``queryset`` de las vistas genéricas.Ya que Django sabe
    que ese QuerySet en particular *nunca* debe ser almacenado en la caché, la vista genérica
    se hace cargo de limpiar la caché cuando cada vista es renderizada.


La solución es usar un llamable en ``extra_context`` en vez de un valor.
Cualquier llamable (por ejemplo, una función) que sea pasado a ``extra_context``
será evaluado cuando su vista sea renderizada (en vez de sólo la primera vez que sea
cargada). Puedes hacer esto con una función explícitamente definida:

.. parsed-literal::

    def get_books():
        return Book.objects.all()

    publisher_info = {
        "queryset" : Publisher.objects.all(),
        "template_object_name" : "publisher",
        "extra_context" : **{"book_list" : get_books}**
    }

o puedes usar una versión menos obvia pero más corta que se basa en el hecho
de que ``Publisher.objects.all`` es en sí un callable:

.. parsed-literal::

    publisher_info = {
        "queryset" : Publisher.objects.all(),
        "template_object_name" : "publisher",
        "extra_context" : **{"book_list" : Book.objects.all}**
    }



Nota la falta de paréntesis después de ``Book.objects.all``; esto hace referencia
a la función sin invocarla realmente (cosa que hará la vista genérica más adelante).


Mostrar subconjuntos de objetos
===============================

Ahora echemos un vistazo más de cerca a esta clave ``Queryset`` que hemos venido
usando hasta aquí. La mayoría de las vistas genéricas usan uno de estos
argumentos ``queryset`` – es la manera en que la vista conoce qué conjunto de
objetos mostrar (mira :doc:`generic views reference</ref/generic-views>` para los detalles completos).

Para tomar un ejemplo simple, tal vez querríamos ordenar una lista de books por
fecha de publicación, con el más reciente primero.

.. parsed-literal::

    book_info = {
        "queryset" : Book.objects.all().order_by("-publication_date"),
    }

    urlpatterns = patterns('',
        (r'^publishers/$', list_detail.object_list, publisher_info),
        **(r'^books/$', list_detail.object_list, book_info),**
    )

Este es un ejemplo bastante simple, pero ilustra muy bien la idea. Por supuesto,
tú usualmente querrás hacer más que sólo reordenar objetos. Si quieres presentar
una lista de books de un publisher en particular, puedes usar la misma técnica:

.. parsed-literal::

    **acme_books = {**
        **"queryset": Book.objects.filter(publisher__name="Acme Publishing"),**
        **"template_name" : "books/acme_list.html"**
    **}**

    urlpatterns = patterns('',
        (r'^publishers/$', list_detail.object_list, publisher_info),
        **(r'^books/acme/$', list_detail.object_list, acme_books),**
    )

Nota que además de un ``queryset`` filtrado, también estamos usando un nombre de
plantilla personalizado. Si no lo hiciéramos, la vista genérica usaría la misma
plantilla que la lista de objetos “genérica”, que puede no ser lo que queremos.

También nota que ésta no es una forma muy elegante de hacer publisher-specific books.
Si queremos agregar otra página publisher, necesitamos otro puñado de líneas en
la URLconf, y más de unos pocos publishers no será razonable.
Enfrentaremos este problema en la siguiente sección.

.. note ::

       Si obtienes un error 404 cuando solicitas ``/books/apress/``, para estar seguro,
       verifica que en realidad tienes un Publisher con el nombre ‘Apress Publishing’.
       Las vistas genéricas tienen un parámetro ``allow_empty`` para este caso.
       Mira :doc:`generic views reference</ref/generic-views>` para mayores detalles.



Filtrado complejo con funciones adaptadoras
--------------------------------------------

Otra necesidad común es filtrar los objetos que se muestran en una página listado
por alguna clave en la URLconf. Anteriormente codificamos el nombre del publisher
en la URLconf, pero ¿qué pasa si queremos escribir una vista que muestre todos
los books por algún publisher arbitrario?. Podemos “encapsular”  la vista genérica
``object_list`` para evitar escribir mucho código a mano. Como siempre,
empezamos escribiendo una URLconf.


.. parsed-literal::

    from books.views import books_by_publisher

    urlpatterns = patterns('',
        (r'^publishers/$', list_detail.object_list, publisher_info),
        **(r'^books/(\\w+)/$', books_by_publisher),**
    )


A continuación, escribiremos la vista ``books_by_publisher``::

    from django.http import Http404
    from django.views.generic import list_detail
    from books.models import Book, Publisher

    def books_by_publisher(request, name):

        # Look up the publisher (and raise a 404 if it can't be found).
        try:
            publisher = Publisher.objects.get(name__iexact=name)
        except Publisher.DoesNotExist:
            raise Http404

        # Use the object_list view for the heavy lifting.
        return list_detail.object_list(
            request,
            queryset = Book.objects.filter(publisher=publisher),
            template_name = "books/books_by_publisher.html",
            template_object_name = "books",
            extra_context = {"publisher" : publisher}
        )

Esto funciona porque en realidad no hay nada en especial sobre las vistas
genéricas – son sólo funciones Python. Como cualquier función de vista,
las vistas genéricas esperan un cierto conjunto de argumentos y retornan objetos
``HttpResponse``. Por lo tanto, es increíblemente fácil encapsular una pequeña
función sobre una vista genérica que realiza trabajo adicional antes
(o después; mira la siguiente sección) de pasarle el control a la vista genérica.

.. note ::

    Nota que en el ejemplo anterior pasamos el publisher que se está mostrando
    actualmente en el ``extra_context``. Esto es usualmente una buena idea en
    envoltorios de esta naturaleza; le permite a la plantilla saber qué objeto
    “padre” esta siendo visto en ese momento.

Realizar trabajo extra
----------------------

El último patrón común que veremos involucra realizar algún trabajo extra antes
o después de llamar a la vista genérica.

Imagina que tenemos un campo ``last_accessed`` en nuestro objeto ``Author`` que
estuvimos usando para tener un registro de la última vez que alguien vio
ese author::

    # models.py

    class Author(models.Model):
        salutation = models.CharField(max_length=10)
        first_name = models.CharField(max_length=30)
        last_name = models.CharField(max_length=40)
        email = models.EmailField()
        headshot = models.ImageField(upload_to='/tmp')
        last_accessed = models.DateTimeField()


La vista genérica object_detail, por supuesto, no sabría nada sobre
este campo, pero una vez más podriamos fácilmente escribir una vista
personalizada para mantener ese campo actualizado.


.. parsed-literal::

    from books.views import author_detail

    urlpatterns = patterns('',
        #...
        **(r'^authors/(?P<author_id>\\d+)/$', author_detail),**
    )

Luego escribimos nuestra función contenedora::

    import datetime
    from books.models import Author
    from django.views.generic import list_detail
    from django.shortcuts import get_object_or_404

    def author_detail(request, author_id):
        # Look up the Author (and raise a 404 if she's not found)
        author = get_object_or_404(Author, pk=author_id)

        # Record the last accessed date
        author.last_accessed = datetime.datetime.now()
        author.save()

        # Show the detail page
        return list_detail.object_detail(
            request,
            queryset = Author.objects.all(),
            object_id = author_id,
        )

.. note::
        Este código en realidad no funcionará a menos que escribamos la plantilla ``books/author_detail.html``


Podemos utilizar un método similar para alterar la respuesta devuelta por la
vista genérica. Si quisiéramos proporcionar una versión en texto plano que se
pueda descargar desde la lista de autores, podríamos usar una vista como esta::

    def author_list_plaintext(request):
        response = list_detail.object_list(
            request,
            queryset = Author.objects.all(),
            mimetype = "text/plain",
            template_name = "books/author_list.txt"
        )
        response["Content-Disposition"] = "attachment; filename=authors.txt"
        return response

Esto funciona porque las vistas genéricas volver simples objetos `` `` HttpResponse
que se puede tratar como diccionarios para establecer los encabezados HTTP. Esta
`` Content-Disposition `` negocio, por cierto, indica al navegador que
descargar y guardar la página en lugar de mostrarla en el navegador.

Esto funciona porque la vista genérica devuelve simplemente objetos ``HttpResponse``
que pueden ser tratados como diccionarios para establecer las cabeceras HTTP.
Este arreglo de ``Content-Disposition``, por otro lado, instruye al navegador a
descargar y guardar la página en vez de mostrarla en el navegador.

