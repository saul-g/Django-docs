########################
Relaciones One-to-one
########################

.. highlight:: pycon


Para definir una relación uno a uno, utilizamos :ref:`ref-onetoone`.

En este ejemplo, ``Place`` opcionalmente puede ser un ``Restaurant``:

.. code-block:: python

    from django.db import models, transaction, IntegrityError

    class Place(models.Model):
        name = models.CharField(max_length=50)
        address = models.CharField(max_length=80)

        def __unicode__(self):
            return u"%s the place" % self.name

    class Restaurant(models.Model):
        place = models.OneToOneField(Place, primary_key=True)
        serves_hot_dogs = models.BooleanField()
        serves_pizza = models.BooleanField()

        def __unicode__(self):
            return u"%s the restaurant" % self.place.name

    class Waiter(models.Model):
        restaurant = models.ForeignKey(Restaurant)
        name = models.CharField(max_length=50)

        def __unicode__(self):
            return u"%s the waiter at %s" % (self.name, self.restaurant)

Los ejemplos que siguen son una muestra de las operaciones que se pueden realizar usando
la API interactiva python.

Primero creamos un par de lugares (Places)::

    >>> p1 = Place(name='Demon Dogs', address='944 W. Fullerton')
    >>> p1.save()
    >>> p2 = Place(name='Ace Hardware', address='1013 N. Ashland')
    >>> p2.save()

Creamos un restaurant. Pasamos la identificación del objeto ID "padre" como ID de este objeto::

    >>> r = Restaurant(place=p1, serves_hot_dogs=True, serves_pizza=False)
    >>> r.save()

Un restaurante puede tener acceso a un lugar::

    >>> r.place
    <Place: Demon Dogs the place>

Un lugar puede tener acceso a un restaurante, si está disponible::

    >>> p1.restaurant
    <Restaurant: Demon Dogs the restaurant>

p2 no tiene un restaurante asociado por lo que lanza un error::

    >>> p2.restaurant
    Traceback (most recent call last):
        ...
    DoesNotExist: Restaurant matching query does not exist.

Establecemos ``place`` usando la notación de asignación. Porque ``place`` es la clave primaria de
el ``restaurant``, al guardar esto creamos  un nuevo ``restaurant``::

    >>> r.place = p2
    >>> r.save()
    >>> p2.restaurant
    <Restaurant: Ace Hardware the restaurant>
    >>> r.place
    <Place: Ace Hardware the place>

Establecemos ``place`` detrás otra vez, usando la asignación en la dirección opuesta::

    >>> p1.restaurant = r
    >>> p1.restaurant
    <Restaurant: Demon Dogs the restaurant>

Restaurant.objects.all() devuelve todos los restaurantes, no los lugares.Nota
que hay dos restaurantes - Ace Hardware the Restaurant - fue creado en la
llamada a r.place = p2::

    >>> Place.objects.order_by('name')
    [<Place: Ace Hardware the place>, <Place: Demon Dogs the place>]

Place.objects.all() devuelve todos los lugares, sin importar si tienen
Restaurantes::

    >>> Place.objects.order_by ("nombre" ")
    [<Place: Hardware del as el place>, <Place: El demonio persigue el place>]

Podemos hacer un query a los modelos usando:
:ref:`lookups across relationships <lookups-that-span-relationships>`::

    >>> Restaurant.objects.get(place=p1)
    <Restaurant: Demon Dogs the restaurant>
    >>> Restaurant.objects.get(place__pk=1)
    <Restaurant: Demon Dogs the restaurant>
    >>> Restaurant.objects.filter(place__name__startswith="Demon")
    [<Restaurant: Demon Dogs the restaurant>]
    >>> Restaurant.objects.exclude(place__address__contains="Ashland")
    [<Restaurant: Demon Dogs the restaurant>]

Esto por supuesto trabaja en forma inversa::

    >>> Place.objects.get(pk=1)
    <Place: Demon Dogs the place>
    >>> Place.objects.get(restaurant__place__exact=p1)
    <Place: Demon Dogs the place>
    >>> Place.objects.get(restaurant=r)
    <Place: Demon Dogs the place>
    >>> Place.objects.get(restaurant__place__name__startswith="Demon")
    <Place: Demon Dogs the place>

Podemos agregar un camarero al restaurante::

    >>> w = r.waiter_set.create(name='Joe')
    >>> w.save()
    >>> w
    <Waiter: Joe the waiter at Demon Dogs the restaurant>

Podemos obtener los  camareros::

    >>> Waiter.objects.filter(restaurant__place=p1)
    [<Waiter: Joe the waiter at Demon Dogs the restaurant>]
    >>> Waiter.objects.filter(restaurant__place__name__startswith="Demon")
    [<Waiter: Joe the waiter at Demon Dogs the restaurant>]

