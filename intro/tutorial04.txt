=========================================
Tu primera aplicación en  Django, parte 4
=========================================

Esta guía comienza después  del  :doc:`Tutorial 3 <tutorial03>`
que acabamos de ver, continuando la aplicación de encuestas web 
y nos centraremos en la forma de procesar un simple formulario
y escribir menos código.

Escribir una simple formulario
==============================

Vamos a actualizar nuestra plantilla ``detail.html`` que creamos en el
tutorial anterior ("polls/detail.html") para incluir una forma o formulario ``<form>``:
HTML.

.. code-block:: html+django

    <h1>{{ poll.question }}</h1>

    {% if error_message %}<p><strong>{{ error_message }}</strong></p>{% endif %}

    <form action="{% url 'polls:vote' poll.id %}" method="post">
    {% csrf_token %}
    {% for choice in poll.choice_set.all %}
        <input type="radio" name="choice" id="choice{{ forloop.counter }}" value="{{ choice.id }}" />
        <label for="choice{{ forloop.counter }}">{{ choice.choice_text }}</label><br />
    {% endfor %}
    <input type="submit" value="Vote" />
    </form>


Un breve resumen:


* La plantilla  anterior  muestra un botón para cada una de las opciones de la encuesta.
  El valor, ``value`` de cada botón esta asociado a el ID de cada poll choice's,  
  el nombre,  ``name`` de cada botón es ``"choice"``. Esto significa que 
  cuando alguien  selecciona uno de los botones de radio, nos envía los datos via
  POST ``choice=3``  en el formulario. Éste es el concepto básico de un formulario HTML.
 

* Hemos creado el formulario  ``action`` en  ``{% url 'polls:vote' poll.id %}`` y
  establecido el método `` method = "post" `` . Usamos  el método `` method = "post" ``
  (en  forma opuesta    al `` method = "get" ``) esto es muy importante, porque 
  el acto de subir un formulario  a un  servidor puede alterar los datos.
  Siempre que creamos un formulario  para subir datos, debemos asegurarnos de 
  usar el ``method="post"``. Esta practica no es especifica de  Django;
  es una buena práctica de desarrollo del Web.

* ``forloop.counter`` indica cuántas veces la etiqueta  :ttag:`for`  ha sido
  usada en el  bucle.

* Puesto que estamos creando una formulario con peticiones POST (que puede tener el
  efecto de modificar datos ), necesitamos preocuparnos de las Falsificación
  de peticiones inter-sitio o Cross Site Request Forgeries.  Gracia a Django,
  no tenemos que preocuparnos  demasiado, porque  viene con un sistema muy fácil 
  de utilizar para  protegernos contra ellas. En fin, todos  los formularios POST
  que apunten  a una  URL interna deben utilizar la etiqueta 
  :ttag:`{% csrf_token %}<csrf_token>` template tag.
  
Ahora, veamos como las vistas de  Django manejan los datos que subimos y hacen algo 
con ellos. Recuerdas que en el :doc:`Tutorial 3 </intro/tutorial03>`, creamos
una URLconf para la aplicación polls que incluía la linea siguiente::

    url(r'^(?P<poll_id>\d+)/vote/$', views.vote, name='vote'),
    
También habíamos  creado una función tonta que implementaba los votos  ``vote()``.
Vamos a crear una versión real. Agregando lo siguiente a ``polls/views.py``::

    from django.shortcuts import get_object_or_404, render
    from django.http import HttpResponseRedirect, HttpResponse
    from django.core.urlresolvers import reverse
    from polls.models import Choice, Poll
    # ...
    def vote(request, poll_id):
        p = get_object_or_404(Poll, pk=poll_id)
        try:
            selected_choice = p.choice_set.get(pk=request.POST['choice'])
        except (KeyError, Choice.DoesNotExist):
            # Redisplay the poll voting form.
            return render(request, 'polls/detail.html', {
                'poll': p,
                'error_message': "You didn't select a choice.",
            })
        else:
            selected_choice.votes += 1
            selected_choice.save()
            # Always return an HttpResponseRedirect after successfully dealing
            # with POST data. This prevents data from being posted twice if a
            # user hits the Back button.
            return HttpResponseRedirect(reverse('polls:results', args=(p.id,)))    

    
Este código incluye algunas cosas que no hemos cubierto en esta guía todavía:

* :attr:`request.POST <django.http.HttpRequest.POST>` es un objeto como un
  diccionario  que nos permite acceder a datos  por el tipo de clave de su nombre.
  En este caso, ``request.POST ["choice"]`` retorna  la ID  de la opción 
  seleccionada (choice), como una  cadena.
  Los valores :attr:`request.POST <django.http.HttpRequest.POST>`
  son  siempre cadenas.

  Observa  que Django también proporciona un :attr:`request.GET
  <django.http.HttpRequest.GET>` para tener acceso a los datos  usamos GET
  de la misma manera --pero estamos utilizando explícitamente 
  :attr:`request.POST <django.http.HttpRequest.POST>`
  usando ``django.http.HttpRequest.POST`` en nuestro código, para
  asegurarnos que los datos solamente puedan ser alterados mediante una llamada a POST.

* :attr:`request.POST <django.http.HttpRequest.POST>` ["choice"] levantará una excepción
  si no se le provees datos mediante POST.
  El código de arriba mostrara el formulario poll con un mensaje de error si 
  no le proporcionamos una ``choice``.

* Después de incrementarse  el contador de choices , el código retorna una
  :class:`~django.http.HttpResponseRedirect`  antes que una normal
  :class:`~django.http.HttpResponse`.
  :class:`~django.http.HttpResponseRedirect`  toma un solo argumento: la
  URL  ala cual se volverá  a redireccionar al usuario  (véase el siguiente punto
  para ver cómo construimos la  URL en este caso).

  Como un  comentario extra acerca de python en este punto podemos siempre
  retornar a   :class:`~django.http.HttpResponseRedirect` después de haber subido
  exitosamente  datos con POST.  Este tip no es especifico de  Django; es una buena
  práctica del desarrollo en general.

* Estamos usando  la función :func:`~django.core.urlresolvers.reverse`
  de la clase   :class:`~django.http.HttpResponseRedirect`  en este ejemplo.
  Esta función nos ayuda a  evitar tener que hardcodear una URL en la función de vista.
  Se le pasa el nombre de la vista  a el que  queremos pasar el control y
  la parte de la variable del patrón  del que apunta la URL a esa vista. En este caso
  usamos la   URLconf que diseñamos en el Tutorial3, esta función llama
  :func:`~django.core.urlresolvers.reverse` y retorna una cadena como::

    "/polls/3/results/"

  ...donde ``3`` es el valor de  ``p.id``. Este  redirecciona la URL 
  y llama ala vista  ``"results"`` la vista muestra la pagina final. Nota que 
  necesitamos  utilizar el nombre completo de la vista aquí ( incluido el prefijo).

Según lo mencionado en el tutorial  3, la petición  ``request`` es una clase de 
:class:`~django.http.HttpRequest`. Para  ver más  puedes leer :class:`~django.http.HttpRequest` 
también puedes ver ``request and response``.

Después de que alguien vota en una encuesta, la vista ``vote ()`` nos redirecciona
a la pagina de resultados de la encuesta, Vamos a escribir la vista::

    from django.shortcuts import get_object_or_404, render

    def results(request, poll_id):
        poll = get_object_or_404(Poll, pk=poll_id)
        return render(request, 'polls/results.html', {'poll': poll})
        
Esto es casi exactamente igual que la vista ``detail ()`` que usamos en el 
:doc:`Tutorial 3 </intro/tutorial03>`.  La única diferencia es el nombre de la
plantilla. Vamos a reducir la redundancia más adelante.

Por ahora, creamos la plantilla para los resultados,  ``results.html``:

.. code-block:: html+django

    <h1>{{ poll.question }}</h1>

    <ul>
    {% for choice in poll.choice_set.all %}
        <li>{{ choice.choice_text }} -- {{ choice.votes }} vote{{ choice.votes|pluralize }}</li>
    {% endfor %}
    </ul>

    <a href="{% url 'polls:detail' poll.id %}">Vote again?</a>

Nos dirigimos a  ``/polls/1/`` en nuestro navegador y votamos en una  encuesta. 
Deveriamos ver una pagina de resultados que  se actualiza  cada vez que votamos,
si subimos un formulario vació nos mostrara un mensaje de error.

Utilizar vistas genéricas: Menos código es mejor
================================================

Las vistas ``detail()`` del  :doc:`Tutorial 3 <tutorial03>`
y ``results()`` son extremadamente simples -- y, según lo mencionamos
anteriormente, redundantes. La vista para el índice  ``index()`` 
(también del tutorial 3), que visualiza la  lista de encuestas, es similar.

Estas vistas representan un caso común en el desarrollo web: obtener los datos 
de la base de datos según un parámetro dado  en la URL, cargar una plantilla
y retornar una plantilla renderizada. Porque esto es tan común, Django proporciona
un atajo simple, llamar al sistema de  "vistas  genéricas".

Las vistas  genéricas abstraen los patrones  comunes a tal  punto que 
incluso no necesitamos escribir código python para mostrar nuestra
aplicación.

Bien, vamos a modificar nuestra aplicación de encuestas para utilizar el sistema
de vistas genéricas de Django, así que podemos suprimir un montón de nuestro propio
código. Solo  tendremos que tomar algunas medidas para hacer la 
conversión:

1. Convertir las URLconf.

2. Borrar las vistas innecesarias.

3. Corregir el manejador de  URL para los nuevas vistas.

Veamos  los detalles.

.. admonition::  ¿Por qué mezclar código?

    Generalmente, al escribir una aplicación, necesitamos evaluar  si las vistas
    genéricas son una buena idea  para resolver nuestro problema y así poder utilizarlas
    desde el principio, sin tener que  refactorizar el  código a medio camino .
    Pero esta guía  se ha centrado intencionalmente en escribir vistas  "de la manera 
    difícil" hasta ahora, nos hemos enfocado en  los conceptos base.

    Debemos saber matemáticas antes de aprender a usar una calculadora.

Primero, editamos el archivo  ``poll/urls.py`` de la URLconf  de esta forma::

    from django.conf.urls import patterns, url
      
    from polls import views

    urlpatterns = patterns('',
        url(r'^$', views.IndexView.as_view(), name='index'),
        url(r'^(?P<pk>\d+)/$', views.DetailView.as_view(), name='detail'),
        url(r'^(?P<pk>\d+)/results/$', views.ResultsView.as_view(), name='results'),
        url(r'^(?P<poll_id>\d+)/vote/$', views.vote, name='vote'),
    )

Modificar vistas
----------------

A continuación, vamos a remover las vistas que usamos anteriormente ``index``,
``detail`` y ``results`` para  utilizar las vistas genéricas de Django en su lugar.
Para ello, abra el modificamos el archivo``polls/views.py`` así ::

    from django.shortcuts import get_object_or_404, render
    from django.http import HttpResponseRedirect
    from django.core.urlresolvers import reverse
    from django.views import generic

    from polls.models import Choice, Poll

    class IndexView(generic.ListView):
        template_name = 'polls/index.html'
        context_object_name = 'latest_poll_list'

        def get_queryset(self):
            """Retorna las ultimas 5 encuestas publicads."""
            return Poll.objects.order_by('-pub_date')[:5]


    class DetailView(generic.DetailView):
        model = Poll
        template_name = 'polls/detail.html'


    class ResultsView(generic.DetailView):
        model = Poll
        template_name = 'polls/results.html'

    def vote(request, poll_id):
        ....


Estamos utilizando dos vistas genéricas aquí:
:class:`~django.views.generic.list.ListView` y
:class:`~django.views.generic.detail.DetailView`. Respectivamente, estas
dos vistas  abstraen el  concepto de "mostrar una lista de objetos"
``ListView`` y "mostrar los detalles de un determinado objeto."
``DetailView``.

* Cada vista  genérica necesita conocer sobre qué modelo actuará
  Esto se proporciona usando  el atributo ``model``.

* La vista genérica :class:`~django.views.generic.list.DetailView` 
  espera capturar el valor primario de la  URL que se llamará
  ``"pk"``, así que hemos cambiado el ``poll_id`` a ``pk`` para
  la vista genérica.
  
Por defecto  la vista genérica de la clase :class:`~django.views.generic.list.DetailView`
utiliza una plantilla que toma su nombre de ``<app name>/<model name>_detail.html``.
En nuestro caso, utilizará la plantilla ``"polls/poll_detail.html"``. 
el argumento ``template_name`` se utiliza para decirle a  Django 
que utilice  una plantilla en especifico, en en vez del nombre autogenerado 
automáticamente por defecto. También especificamos un ``template_name`` para   
``results`` list view  --esto asegura de que las vistas tengan una apariencia distinta
cuando sean renderizados, aunque ambas usen la misma vista 
:class:`~django.views.generic.list.DetailView` detrás de escena.  

Similarmente  la vista  genérica de la clase  :class:`~django.views.generic.list.ListView`
usan una plantilla por default   llamada  ``<app name>/<model name>_list.html``; 
hemos usado ``template_name`` para decirle a  :class:`~django.views.generic.list.ListView`
que use la vista  :class:`~django.views.generic.list.ListView` con la plantilla 
``"polls/index.html"``.

Anteriormente en este tutorial, le habíamos proporcionado un contexto en las vistas
a nuestras plantillas  ``poll`` y ``latest_poll_list``. Para ``DetailView``
la variable ``poll`` se genera automáticamente --porque estamos usando el modelo 
Django (``Poll``), Django puede determinar un nombre apropiado para la variable del contexto.
Sin embargo, para ListView, la variable automáticamente generada del contexto era
``poll_list``. Para sobreescribir esto proporcionamos la opción ``context_object_name``
especificando que queremos utilizar  ``latest_poll_list`` en lugar de  ``poll_list``.
Como alternativa, podríamos cambiar las plantillas para que concuerden 
con las nuevas variables por default  -- pero es  más fácil  decirle a Django que 
utilice solo la variable que queremos usar.


Reiniciamos el servidor y ya podemos utilizar la nueva aplicación de encuestas
basada en vistas genéricas.

Para mas detalles acerca de el uso de las vista genéricas, puedes leer
:doc:`generic views documentación </topics/class-based-views/index>`.

Cuando te sientas cómodo usando las vistas genéricas y los formularios, puedes
leer el  :doc:`part 5 of this tutorial</intro/tutorial05>` para aprender sobre
como poner a prueba nuestra aplicación de encuestas.
