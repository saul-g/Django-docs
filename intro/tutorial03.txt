=========================================
Tu primera aplicación en  Django, parte 3
=========================================

Esta guía comienza después del  :doc:`Tutorial 2 <tutorial02>`
Continuando con la aplicación de  encuestas web que hemos creado  
nos centraremos en crear la interfaz pública con vistas --``views``--.

Filosofía
==========

Una vista es un "tipo" de página Web en una aplicación Django que generalmente 
sirve una  función especifica para determinada una plantilla. Por ejemplo, para
una aplicación Web tipo Blog, necesitaríamos tener las siguientes vistas:

* Una pagina de inicio  del blog -- muestra las ultimas entradas.

* Una Pagina para "detalles" de la entrada -- mostrar una pagina por entrada.

* Una pagina basada en archivos por año  -- visualiza todas  las entradas con
  respecto a un año dado.

* Una pagina basada en archivos por mes  -- visualiza todos los días con las
  entradas   del  mes dado.

* Una pagina basada en archivos por día  -- visualiza todas las entradas en el 
  día dado.

* Comentarios -- Maneja  los comentarios de una entrada dada.

En nuestra aplicación de encuestas, tendremos las cuatro vistas siguientes:

* Una Pagina ``index`` (indice) -- mostrara las ultimas encuestas.

* Una pagina ``detail`` (detalles) -- mostrara  una pregunta de la encuesta,
  con un formulario para votar pero no mostrara los resultados.

* La pagina ``results`` (resultados) -- mostrara  todas las visualizaciones para
  una encuesta determinada.

* Pagina para votar -- manejara los votos para una opción determinada en un 
  una encuesta en  particular --.


En Django, las paginas web  y otros contenidos son manejados por las vistas. 
Cada vista  es representada por una simple función python (o un método, en este
caso una vista basada en clases.) Django elige una vista examinando la petición 
URL (para ser precisos, la parte de la URL después del nombre del dominio)

Hasta ahora, tal vez puedes haberte encontrado en la web bellezas tales como 
"ME2/Sites/dirmod.asp?sid=&type=gen&mod=Core+Pages&gid=A6CD4967199A42D9B65B1B".
Estaras contento de saber que Django te permite construir elegantes patrones URL.

Un patrón URL es simplemente la forma general de una dirección URL - por ejemplo:
``/newsarchive/<year>/<month>/``.

Para traer la URL a una vista, Django usa lo que conocemos como una 'URLconfs'. Una
URLconfs mapea un patrón  URL (descrito como una expresión regular) a una vista.

Este tutorial provee una instrucción básica acerca del uso de URLconfs y si 
necesitas mas referencias puedes consultar el
modulo :mod:`django.core.urlresolvers` para mas información.

Escribir nuestra primera vista
==============================

Vamos a escribir nuestra primera vista. Abrimos el archivo ``polls/views.py``
y ponemos el siguiente código python en el ::

    from django.http import HttpResponse

    def index(request):
        return HttpResponse("Hello, world. You're at the poll index.")

Esta es la vista más simple posible. Para llamar ala vista, necesitamos mapear 
la vista a una URL - y para ello necesitamos una URLconf.
Para crear una URLconf, en el directorio polls, creamos un archivo llamado ``urls.py``.
de nuestro directorio en la aplicación polls, debe parecerse a este::

    polls/
        __init__.py
        admin.py
        models.py
        tests.py
        urls.py
        views.py

En el archivo ``polls/urls.py`` incluimos el siguiente código::

    from django.conf.urls import patterns, url

    from polls import views

    urlpatterns = patterns('',
        url(r'^$', views.index, name='index')
    )

Como siguiente paso conectamos la URLconf ala raíz del el modulo``polls.urls``.
En ``mysite/urls.py`` insertamos la función 
``mysite/urls.py`` insert an :func:`~django.conf.urls.include`,
quedándonos como sigue::

    from django.conf.urls import patterns, include, url

    from django.contrib import admin
    admin.autodiscover()

    urlpatterns = patterns('',
        url(r'^polls/', include('polls.urls')),
        url(r'^admin/', include(admin.site.urls)),
    )    


Ahora tenemos nuestra vista  ``index``` en una URLconf. Dirigimos nuestro navegador
a http://localhost:8000/polls/  y podemos ver el texto que dice:
"*Hello, world. You're at the poll index.*", el cual definimos en la vista  
``index``.

La función :func:`~django.conf.urls.url` pasa cuatro argumentos, dos requeridos,
un ``regex``  y una ``view``, dos opcionales: ``kwargs`` y ``name``.
En este punto, es importante repasar estos cuatro argumentos.

:func:`~django.conf.urls.url` argumento: regex
---------------------------------------------

El término "regex" es comúnmente usado como abreviatura para nombrar una expresión
regular, que es una forma de describir patrones que se verifiquen en una cadena, 
en este caso patrones de una url. 
Cuando un usuario solicita una pagina creada por  Django, el sistema busca una
cadena en python, Django busca un  módulo que contiene una variable llamada
``urlpatterns`` que es una secuencia de tuplas con el formato siguiente::

  (Expresión regular , Llamada a una función Python  [,Diccionario opcional])

Django comienza con la expresión regular y efectúa un recorrido  hacia abajo de la lista,
comparando el URL pedido contra cada expresión regular hasta que encuentre una
que  corresponda.

Cuando encuentra una que corresponde, Django llama la función de Python, 
:class:`~django.http.HttpRequest` con  el objeto  como el primer argumento, cualquier
valor "capturado"  de  las expresión regulares como argumentos  clave 
y opcionalmente, argumentos arbitrarios del tipo diccionario 
(como  tercer item opcional en la tupla).

Observa que estas expresiones regulares no buscan parámetros  GET y POST 
o el nombre del dominio. Por ejemplo, en una petición a ``http://www.example.com/myapp/``,
el URLconf buscará ``myapp/``. En una petición a
``http://www.example.com/myapp/?page=3``, la  URLconf buscará ``myapp/``.

Si necesitas mas  ayuda con las expresiones regulares, puedes consultar 
`En la Wikipedia`_ y en  la documentación del modulo ``re`` de  python 
También, esta el fantástico libro de O'Reilly  "Mastering Regular Expressions"
by Jeffrey Friedl.

Finalmente, una nota sobre el  funcionamiento de las expresiones regulares, estas se 
compilan la primera ves que son cargadas. Esto hace que sean muy rápidas (mientras que
no sean demasiado complejas según lo mencionamos arriba).

.. _En la Wikipedia : http://en.wikipedia.org/wiki/Regular_expression

Para más información sobre :class:`~django.http.HttpRequest`, considera ver
:doc:`/ref/request-response`. Para más detalles sobre URLconfs, puedes consultar
:doc:`/topics/http/urls`.

:func:`~django.conf.urls.url` argumento: vista
--------------------------------------------

Cuando Django encuentra una expresión regular que coincide, llama a la función vista
especifica, con un objeto :class:`~django.http.HttpRequest` como primer argumento y los
valores que se hayan "capturado" a partir de la expresión regular como otros argumentos.
Si el regex usa capturas simples, estos valores son pasados como argumentos posicionales;
si se usan capturas con nombre, los valores se pasan como argumentos clave. Veremos un ejemplo
mas adelante.

:func:`~django.conf.urls.url` argumento: kwargs
----------------------------------------------

Se pueden pasar argumentos clave arbitrarios en un diccionario a la vista de destino.
No vamos a usar esa característica en este tutorial.

:func:`~django.conf.urls.url` argumento: name
---------------------------------------------

Nombrar las URL nos permite referirnos a ellas de forma inequívoca desde distintas 
partes en Django, especialmente en las plantillas. Esta poderosa característica nos permite 
hacer cambios globales en los patrones  url del proyecto, unicamente cambiando tan sólo un 
simple archivo.

Escribiendo mas vistas
======================

Ahora agreguemos algunas views más a ``polls/views.py``. Estas vistas van a ser
un poco diferentes porque van a tomar un argumento::

    def detail(request, poll_id):
        return HttpResponse("You're looking at poll %s." % poll_id)

    def results(request, poll_id):
        return HttpResponse("You're looking at the results of poll %s." % poll_id)

    def vote(request, poll_id):
        return HttpResponse("You're voting on poll %s." % poll_id)

Conectemos estas nuevas vistas a el el módulo ``polls.urls`` agregando la siguientes llamada
a el :func:`~django.conf.urls.url` ::

    from django.conf.urls import patterns, url

    from polls import views

    urlpatterns = patterns('',
        # ex: /polls/
        url(r'^$', views.index, name='index'),
        # ex: /polls/5/
        url(r'^(?P<poll_id>\d+)/$', views.detail, name='detail'),
        # ex: /polls/5/results/
        url(r'^(?P<poll_id>\d+)/results/$', views.results, name='results'),
        # ex: /polls/5/vote/
        url(r'^(?P<poll_id>\d+)/vote/$', views.vote, name='vote'),
    )
    
Ahora vamos a nuestro navegador  y visitamos la dirección  "/polls/34/". 
Se ejecutara la función ``detail()``  y nos mostrará el ID que hayamos pasamos
a la la URL.
Probemos ahora con "/polls/34/results/" y "/polls/34/vote/"  – esto nos debería 
mostrar la pagina de resultados y la de votos.

Cuando alguien  solicita una pagina de  nuestro sitio web   --es  decir,
"/polls/34/", Django cargará el módulo python ``mysite.urls``, que apunte al
archivo de configuración  settings.py en la variable :setting:`ROOT_URLCONF`.
Este encuentra la variable llamada ``urlpatterns`` y recorre las expresiones
regulares en  orden. 

Las llamada a el método :func:`~django.conf.urls.include` simplemente hace 
referencia a otra URLconf. Nota que las expresiones regulares para 
:func:`~django.conf.urls.include` no tienen un ``$`` (carácter que indica el 
fin de una cadena en un patrón), sino que terminan en una barra.
Cada vez que Django encuentra un :func:`~django.conf.urls.include`, recorta la
parte de la URL que coincide hasta ese punto y envía la cadena restante ala 
URLconf para que sea procesada.

La idea detrás de  :func:`~django.conf.urls.include` es crear fácilmente
URLs plug-and-play.
Como polls tiene su propio URLconf (polls/urls.py), las URLs de la aplicación 
se pueden poner bajo "/polls/" o bajo "/fun_polls/", o bajo "/content/polls/",
o cualquier otro camino y la aplicación seguirá funcionando.

Esto es lo que pasa cuando un usuario va a  "/polls/34/" en el sistema:

* Django encontrará coincidencia en ``'^polls/'``

* Entonces, Django va a recortar el texto que coincide con (``"polls/"``) y 
  enviara  el texto restante  – "34/" – al URLconf 'polls.urls' para seguir el
  proceso, donde coincidirá con ``r'^(?P<poll_id>\d+)/$'``,
  resultando en una llamada a la vista detail() de esta forma::

      detail(request=<HttpRequest object>, poll_id=’34’)

La parte ``poll_id='34'`` viene  de ``(?P<poll_id>\d+)``. Usando paréntesis
alrededor de un patrón  para "capturar" el texto que coincida con el patrón y
ese valor se pasas como argumento a la función vista;  ``?P<poll_id>``  
definimos el nombre que se usará para identificar la coincidencia; y \d+ es una
expresión regular para buscar una secuencia de dígitos (i.e., un número).
Como los patrones de URL son expresiones regulares, no hay realmente un límite 
de lo que se  puede hacer con ellos. Y no hay necesidad de agregar cosas como
``.html`` – a menos que uno quisiera, en  cuyo caso nos quedaría algo como::

    (r’^polls/latest\.html$’, ’polls.views.index’),

Pero, hacer esto. Es absurdo.

Observa que estas expresiones regulares no buscan parámetros  GET y POST 
o el nombre del dominio. Por ejemplo, en una petición a
``http://www.example.com/myapp/``,  el URLconf buscará ``myapp/``. En una 
petición a ``http://www.example.com/myapp/?page=3``, la  URLconf buscará
``myapp/``.

Escribiendo vistas que realmente hagan algo
============================================

Cada vista es responsable de hacer una de dos cosas: Retornar un objeto
:class:`~django.http.HttpResponse` que contiene el contenido de
cada pagina  pedida, o lanzar una excepción por  ejemplo :exc:`~django.http.Http404`
una pagina no encontrada. El resto depende de nosotros.

Nuestra vista puede leer registros de la base de datos, o no. Puede utilizar el
sistema  de plantillas  de  Django -- o un sistema de plantillas de terceros 
-- o no. Puede generar un fichero  pdf, crear salidas en  XML, crear archivos
ZIP al vuelo  o  cualquier cosa, usando   las bibliotecas  de Python 
el limite es la imaginación.

Todo lo Django necesita es un objeto  :class:`~django.http.HttpResponse` o una excepción.

De forma  conveniente, Django nos permite utilizar una API, para tener acceso a
la base de datos, tal como lo vimos en el :doc:`Tutorial 1 <tutorial01>`. 
Veamos como mostrar las ultimas 5 encuestas  de nuestro sistema,
separadas por comas, de acuerdo a  la fecha de publicación::

    from polls.models import Poll
    from django.http import HttpResponse

    def index(request):
        latest_poll_list = Poll.objects.all().order_by('-pub_date')[:5]
        output = ', '.join([p.question for p in latest_poll_list])
        return HttpResponse(output)

Pero tenemos un problema aquí,  hemos mezclado la plantilla con la vista,
si queremos cambiar el look de  la paginas tendriamos que editar código
python.
Utilicemos el sistema de plantillas para separar el diseño del código python:

Primero, creamos un directorio ``templates`` para las plantillas, en el directorio
``polls``. Django buscara las plantillas alli.

La variable :setting:`TEMPLATE_LOADERS` en Django, contiene una lista de llamables
que saben como importar las plantillas de varios lugares.Uno de estos lugares por
defaul es :class:`django.template.loaders.app_directories.Loader` que busca un
subdirectorio "templates"  en cada aplicación instalada en :setting:`INSTALLED_APPS`
-- esta es la forma en Django sabe donde debe buscar las plantillas, siempre
y cuando no hayamos modificado la variable :setting:`TEMPLATE_DIRS`, como mencionamos
en el  :ref:`Tutorial 2 <ref-customizing-your-projects-templates>`.

..  admonition::  Organizando las plantillas

    Ahora podríamos colocar todas nuestras plantillas juntas, en un gran directorio
    directorio de plantillas y funcionaría perfectamente. Sin embargo, estas 
    plantilla pertenece a la aplicación de encuestas, por lo que a diferencia 
    de las plantilla de administración que creamos en el tutorial anterior, 
    vamos a poner estas en el directorio de plantillas de la aplicación
    (``polls/templates``) en lugar del proyecto (``templates``). vamos a examinar
    más a detalle *por que* hacemos esto en el :doc:`reusable apps tutorial
    </intro/reusable-apps>`.

Dentro de el directorio ``templates`` que acabamos  de crear, creamos otro
directorio llamado ``polls`` y dentro de este creamos un archivo llamado
``index.html``. En otras palabras, la plantilla debe de ser así: 
``polls/templates/polls/index.html``. Debido a la forma en que funcionan  
los buscadores de plantillas ``app_directories``, como se describió anteriormente,
se puede hacer referencia a esta plantilla  en  Django sencillamente como
``polls/index.html``.

.. admonition:: Nombres de plantillas

    Pero *colocar* juntas todas nuestras plantillas, en el directorio
    ``polls/templates`` (En lugar de crear otro subdirectorio ``polls``), es en
    realidad una mala idea. Django elegirá la primera plantilla  que encuentre 
    cuyo nombre coincida,  si tuviéramos *diferentes* aplicaciones con nombres de 
    plantillas iguales, Django seria incapaz de distinguir entre ellas, 
    de vemos asegurarnos que Django encuentre las plantillas correctas y la forma
    mas sencilla de hacer esto, es usando una separación de nombres entre las distintas
    aplicaciones. Esto es, poniendo las plantillas dentro de otro subdirectorio,
    con el nombre de la aplicación en si.


Ponemos el siguiente código en la plantilla:

.. code-block:: html+django

    {% if latest_poll_list %}
        <ul>
        {% for poll in latest_poll_list %}
            <li><a href="/polls/{{ poll.id }}/">{{ poll.question }}</a></li>
        {% endfor %}
        </ul>
    {% else %}
        <p>No polls are available.</p>
    {% endif %}

Ahora vamos a usar la plantilla html en nuestra vista de índice ::

    from django.http import HttpResponse
    from django.template import Context, loader

    from polls.models import Poll

    def index(request):
        latest_poll_list = Poll.objects.order_by('-pub_date')[:5]
        template = loader.get_template('polls/index.html')
        context = Context({
            'latest_poll_list': latest_poll_list,
        })
        return HttpResponse(template.render(context))      
        
	
El código carga la plantilla llamada  ``poll/index.html`` y  pasa este contexto.
El contexto es un diccionario que asocia una plantilla con una llamada
a una función python.

Recargamos la pagina otra vez. Ahora vemos otro error
(Plantilla no encontrada):


Recargamos la página, señalando su navegador en "/polls/", y deberías ver una
lista de viñetas que contiene el "What's up" del Tutorial 1, con un enlace
a la página de detalles de la encuesta.

Cargamos  la pagina  en nuestro navegador en "/polls/"  y podemos ver una lista 
subrayada que contiene  el "What's up"  del tutorial 1, con un enlace ala pagina
de detalles de la encuesta.


Un atajo: render_to_response ()
-------------------------------

Es muy común  cargar una plantilla, para llenar un contexto y retornar una 
respuesta web :class:`~django.http.HttpResponse`. Django proporciona  un atajo. 
Esta es la vista ``index()`` reescrita  totalmente::

    from django.shortcuts import render

    from polls.models import Poll

    def index(request):
        latest_poll_list = Poll.objects.all().order_by('-pub_date')[:5]
        context = {'latest_poll_list': latest_poll_list}
        return render(request, 'polls/index.html', context)


Observa que una vez que hemos hecho esto en la vista, no necesitamos  más 
importar :mod:`~django.template.loader`, :class:`~django.template.Context` y
:class:`~django.http.HttpResponse` (Seguiremos usando el método ``HttpResponse``
todavia en las vistas ``detail``, ``results`` y ``vote``).

La función  :func:`~django.shortcuts.render_to_response` toma un objeto request
como primer argumento, una plantilla como segundo argumento y un  diccionario
como tercer argumento opcional y devuelve  un objeto ``django.http.HttpResponse`` 
con una plantilla renderizada con el contexto  dado.

Lanzando un  404
================

Ahora, creamos la vista para  los detalles de la encuesta ``detail()``  -- la pagina muestra  la pregunta
para una encuesta dada--.
Aquí está la vista para ``detail()``::

Ahora, veamos la vista ``detail``  de la encuesta - la página que muestra la pregunta
para una encuesta dada. Esta es::

    from django.http import Http404
    from django.shortcuts import render

    from polls.models import Poll
    # ...
    def detail(request, poll_id):
        try:
            poll = Poll.objects.get(pk=poll_id)
        except Poll.DoesNotExist:
            raise Http404
        return render(request, 'polls/detail.html', {'poll': poll})

El nuevo concepto aquí: La vista levanta una excepción ``django.http.Http404``
(pagina no encontrada) si no existe una encuesta con la identificación pedida.
 
Mas adelante  discutiremos lo que  podremos  poner en nuestra plantilla ``polls/detail.html``
por el momento bastara con usar::

    {{poll}}

Esto trabajara bien  por ahora.

Un atajo: get_object_or_404 ()
------------------------------

Es muy común usar el método :meth:`~django.db.models.query.QuerySet.get`
y lanzar una excepción  :exc:`~django.http.Http404` si no existe el objeto. Django
proporciona  un atajo muy útil.
Este es el la vista ``detail ()``, actualizada usando ``get_object_or_404 ()``::

    from django.shortcuts import render, get_object_or_404

    from polls.models import Poll
    # ...
    def detail(request, poll_id):
        poll = get_object_or_404(Poll, pk=poll_id)
        return render(request, 'polls/detail.html', {'poll': poll})

La función ``django.shortcuts.get_object_or_404`` toma una plantilla de Django
como su primer argumento y un número arbitrario de argumentos clave, que 
pasa  al mánager del modelo ``django.db.models.query.QuerySet.get`` y lanza una 
excepción  ``django.http.Http404`` si no existe el objeto.

.. admonition:: Filosofía

    Porqué utilizamos una función auxiliar :func:`~django.shortcuts.get_object_or_404`
    en vez de cargar  automáticamente  las 
    :exc:`~django.core.exceptions.ObjectDoesNotExist` en un un nivel mas alto
    o lanzando un  :exc:`~django.http.Http404` en lugar de 
    :exc:`~django.core.exceptions.ObjectDoesNotExist`?
    
    Porque eso acoplaría la capa del modelo con la vista. Una de
    las primeras metas de los diseñadores de Django es mantener el acoplamiento débil.
    Algunos acoplamientos controlados se introducen en el modulo :mod:`django.shortcuts`.

El modulo ``django.shortcuts.get_list_or_404`` contiene algunas funciones que  trabajan
como la función ``django.shortcuts.get_object_or_404`` -- excepto usando
:meth:`~django.db.models.query.QuerySet.filter` en lugar de 
:meth:`~django.db.models.query.QuerySet.get`. este lanza
un :exc:`~django.http.Http404` si la lista esta vacía.


Escribir  una  vista 404 (pagina no encontrada) 
===============================================

Cuando  lanzamos una excepción :exc:`~django.http.Http404` dentro de un vista,
Django carga una vista especial para manejar errores  404. Los encuentra
buscando  la variable  ``handler404`` en la  raíz  de URLconf  (y solamente en 
la  raíz  de la URLconf en cualquier otro lugar  no tiene ningún efecto), es una
cadena con la sintaxis  de  python   --con el mismo formato de llamada  que una 
URLconf  normal. Una  vista 404 en sí no tiene nada de especial. 
Es justamente una vista normal.


Normalmente no tendremos que preocuparnos por escribir vistas  404. Ni tampoco  manejadores
``handler404``, En todo caso usaremos por default  :func:`django.views.defaults.page_not_found`
Opcionalmente podemos  crear una plantilla ``404.html`` en la raíz del directorio
de plantillas. La vista  por default se usara para todos los errores  de plantillas 
404, si el archivo de configuración (settings.py )esta marcado como ``DEBUG`` 
= ``False`` y si no creamos un archivo ``404.html``  se lanzara un errror 
``Http500`` en su lugar. Si creamos la plantilla, necesitamos al menos añadir
algún contenidos como "Página no encontrada".


Un par de  cosas a notar acerca de las vistas 404 :

* Si el archivo de configuración (settings.py) esta marcado como `DEBUG` ``True`` 
  entonces la vista 404 no podrá ser utilizada (y de este modo  la plantilla ``404.html``
  nunca podrá ser renderizada) porque en su lugar sera mostrado un  traceback.

* La vista 404 también es llamado,  si Django no encuentra una correspondencia
  después de checar cada expresión  regular en la  URLconf.

Escribir una vista 500 ( error del servidor)
===========================================

De igual forma podemos definir una URLconf que defina un manejador ``handler500``
el cual apunta a una vista con una llamada en caso de errores del servidor.
Los errores de servidor suceden cuando tenemos errores en tiempo de ejecución,
en el código de la vista.
Del mismo modo, necesitamos crear una plantilla ``500.html`` en la raíz del
directorio de plantillas y añadir un poco de contenido, como "Algo salió mal".

Usar el sistema de Plantillas:
==============================

De regreso  ala vista  ``detail()`` de nuestra aplicación ``poll``.
Damos contexto ala variable ``poll`` , esta es la plantilla "polls/detail.html"
rescrita nuevamente:

.. code-block:: html+django

    <h1>{{ poll.question }}</h1>
    <ul>
    {% for choice in poll.choice_set.all %}
        <li>{{ choice.choice_text }}</li>
    {% endfor %}
    </ul>

El sistema de plantillas  utiliza la  sintaxis de puntos  para acceder a los atributos
de una variable por  ejemplo ``{{poll.question}}``, primero Django hace una
consulta a los  diccionarios del  objeto ``poll``. la palabra ``question`` en este
caso,  fallando silenciosamente si no la encuentra.

El método llama al bucle ``{% for %}``, ``poll.choice_set.all`` es interpretado
como código python , ``poll.choice_set.all()``; retorna un iterable de los
objetos choices que pueden ser llamados por la etiqueta ``{% for %}``

Puedes ver la guía sobre plantillas para aprender mas.

Podemos usar un bucle para llamar a el método :ttag:`{% for %}<for>` loop:
``poll.choice_set.all`` es interpretado como código Python
``poll.choice_set.all()``, el cual retorna un iterable de el objeto ``Choice`` que
pueden ser llamados por etiqueta :ttag:`{% for %}<for>`.

Puedes ver la guía sobre plantillas :doc:`template guide </topics/templates>`
para mas detalles.

Removiendo URL ancladas a plantillas
====================================

Recuerdas que cuando escribimos el enlace a una encuesta en  la plantilla
``polls/index.html`` , el enlace fue parcialmente codificado así:

.. code-block:: html+django

    <li><a href="/polls/{{ poll.id }}/">{{ poll.question }}</a></li>
    
El problema de este enfoque, estrechamente acoplado es que se convierte en un
desafío cambiar las URL del los proyectos con una gran cantidad de plantillas.
Sin embargo, ya que que hemos definido el argumento ``name`` en 
:func:`~django.conf.urls.url` en el modulo ``polls.urls ``, podemos eliminar la
dependencia de las rutas URL específicas que hemos definido en las configuraciones
del URL mediante la etiqueta de plantilla ``{% url %}``.

.. code-block:: html+django

    <li><a href="{% url 'detail' poll.id %}">{{ poll.question }}</a></li>

.. note::

    Si ``{% url 'detail' poll.id %}`` (con comillas simples) no funciona, pero
    ``{% url detail poll.id %}`` (sin comillas) si, significa que estamos usando
    una versión menor a  Django < 1.5. En este caso, necesitamos agregar la siguiente
    declaración al inicio de nuestra plantilla:

    .. code-block:: html+django

        {% load url from future %}
        
La forma en que esto funciona es buscando la definición  de la URL que se 
especifico en el modulo ``polls.url``, podemos ver exactamente donde se definió el 
el nombre de la URL en  'detail'  a continuación ::

    ...
    # El valor 'name' es llamado por la etiqueta de plantilla {% url %} 
    url(r'^(?P<poll_id>\d+)/$', views.detail, name='detail'),
    ...        
    
Si queremos cambiar la vista detail, por algo un poco diferente como 
``polls/specifics/12/`` en lugar de hacerlo en la plantilla (o plantillas)solo
de vemos cambiar el archivo en   ``polls/urls.py``::
    ...
    # agregamos la palabra 'specifics'
    url(r'^specifics/(?P<poll_id>\d+)/$', views.detail, name='detail'),
    
Espacio de nombres en URL
=========================

El proyecto de este tutorial tiene una sola aplicación, ``polls``. En los
proyectos reales de Django, podríamos tener cinco, diez, veinte o más aplicaciones.
¿Cómo distingue Django los nombres de las URL entre ellos? Por ejemplo, la 
aplicación ``polls `` tiene una vista ``detail``, por lo que podríamos tener otra 
aplicación en el mismo proyecto, por ejemplo un blog con el mismo nombre. ¿Cómo hace
Django para saber que aplicación va usar en la vista cuando se utiliza la etiqueta
de plantilla ``{% Url%}``.    

La respuesta consiste en agregar espacios de nombres ``namespace`` ala  raíz de
la  URLconf. En el  archivo ``mysite/urls.py``  (el archivo del proyecto 
``urls.py``, no de la aplicación), para seguir adelante incluimos ``namespace`` en 
la urlCONF::

    from django.conf.urls import patterns, include, url

    from django.contrib import admin
    admin.autodiscover()

    urlpatterns = patterns('',
        url(r'^polls/', include('polls.urls', namespace="polls")),
        url(r'^admin/', include(admin.site.urls)),
    )    

Ahora cambiamos la plantilla  ``polls/index.html``:

.. code-block:: html+django

    <li><a href="{% url 'detail' poll.id %}">{{ poll.question }}</a></li>

para que apunte ala vista detalles con el espacio de nombres:

.. code-block:: html+django

    <li><a href="{% url 'polls:detail' poll.id %}">{{ poll.question }}</a></li>        

Cuando te sientas cómodo escribiendo vistas, puedes leer 
:doc:`part 4 of this tutorial </intro/tutorial04>` para aprender sobre procesamiento
simple de formularios y vistas genéricas.
